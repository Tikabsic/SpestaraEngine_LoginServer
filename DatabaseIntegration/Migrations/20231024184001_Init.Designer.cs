// <auto-generated />
using System;
using DatabaseIntegration.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DatabaseIntegration.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231024184001_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DatabaseIntegration.Entities.Items.ObtainableItem", b =>
                {
                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<string>("ItemDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("ItemName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OwnerId");

                    b.HasIndex("ItemId");

                    b.ToTable("ObtainableItems");
                });

            modelBuilder.Entity("DatabaseIntegration.Entities.Player.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountName")
                        .HasMaxLength(18)
                        .HasColumnType("nvarchar(18)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("Nationality")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("DatabaseIntegration.Entities.Player.GameCharacter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Nickname")
                        .HasMaxLength(18)
                        .HasColumnType("nvarchar(18)");

                    b.Property<int>("SlotNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("Nickname")
                        .IsUnique()
                        .HasFilter("[Nickname] IS NOT NULL");

                    b.ToTable("GameCharacters");
                });

            modelBuilder.Entity("DatabaseIntegration.Entities.Player.PlayerSkills", b =>
                {
                    b.Property<int>("GameCharacterId")
                        .HasColumnType("int");

                    b.Property<int>("Agility")
                        .HasColumnType("int");

                    b.Property<int>("Defence")
                        .HasColumnType("int");

                    b.Property<int>("Strength")
                        .HasColumnType("int");

                    b.HasKey("GameCharacterId");

                    b.HasIndex("GameCharacterId")
                        .IsUnique();

                    b.ToTable("PlayersSkills");
                });

            modelBuilder.Entity("DatabaseIntegration.Entities.Player.PlayerStats", b =>
                {
                    b.Property<int>("GameCharacterId")
                        .HasColumnType("int");

                    b.Property<int>("CharacterLevelExperiencePoints")
                        .HasColumnType("int");

                    b.Property<int>("CurrentHp")
                        .HasColumnType("int");

                    b.Property<int>("CurrentMana")
                        .HasColumnType("int");

                    b.Property<int>("CurrentStamina")
                        .HasColumnType("int");

                    b.Property<int>("MaxHp")
                        .HasColumnType("int");

                    b.Property<int>("MaxMana")
                        .HasColumnType("int");

                    b.Property<int>("MaxStamina")
                        .HasColumnType("int");

                    b.HasKey("GameCharacterId");

                    b.HasIndex("GameCharacterId")
                        .IsUnique();

                    b.ToTable("PlayersStats");
                });

            modelBuilder.Entity("DatabaseIntegration.Entities.Items.ObtainableItem", b =>
                {
                    b.HasOne("DatabaseIntegration.Entities.Player.GameCharacter", "Owner")
                        .WithMany("Inventory")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("DatabaseIntegration.Entities.Player.GameCharacter", b =>
                {
                    b.HasOne("DatabaseIntegration.Entities.Player.Account", "Account")
                        .WithMany("GameCharacters")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("DatabaseIntegration.Entities.Player.PlayerSkills", b =>
                {
                    b.HasOne("DatabaseIntegration.Entities.Player.GameCharacter", "GameCharacter")
                        .WithOne("PlayerSkills")
                        .HasForeignKey("DatabaseIntegration.Entities.Player.PlayerSkills", "GameCharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameCharacter");
                });

            modelBuilder.Entity("DatabaseIntegration.Entities.Player.PlayerStats", b =>
                {
                    b.HasOne("DatabaseIntegration.Entities.Player.GameCharacter", "GameCharacter")
                        .WithOne("PlayerStats")
                        .HasForeignKey("DatabaseIntegration.Entities.Player.PlayerStats", "GameCharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameCharacter");
                });

            modelBuilder.Entity("DatabaseIntegration.Entities.Player.Account", b =>
                {
                    b.Navigation("GameCharacters");
                });

            modelBuilder.Entity("DatabaseIntegration.Entities.Player.GameCharacter", b =>
                {
                    b.Navigation("Inventory");

                    b.Navigation("PlayerSkills");

                    b.Navigation("PlayerStats");
                });
#pragma warning restore 612, 618
        }
    }
}
